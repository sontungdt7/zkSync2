"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.compileWithBinary = exports.checkZksolcBinary = void 0;
const child_process_1 = require("child_process");
const utils_1 = require("../utils");
// Checks whether `zksolc` is available in `$PATH`.
function checkZksolcBinary() {
    const inPath = (0, child_process_1.spawnSync)('which', ['zksolc']).status === 0;
    if (!inPath) {
        throw (0, utils_1.pluginError)('`zksolc` binary is either not installed or not in $PATH');
    }
}
exports.checkZksolcBinary = checkZksolcBinary;
async function compileWithBinary(input, config) {
    const output = await new Promise((resolve, reject) => {
        var _a, _b;
        const process = (0, child_process_1.exec)(`zksolc --standard-json ${((_b = (_a = config === null || config === void 0 ? void 0 : config.settings) === null || _a === void 0 ? void 0 : _a.optimizer) === null || _b === void 0 ? void 0 : _b.enabled) ? '--optimize' : ''}`, {
            maxBuffer: 1024 * 1024 * 500,
        }, (err, stdout, _stderr) => {
            if (err !== null) {
                return reject(err);
            }
            resolve(stdout);
        });
        process.stdin.write(JSON.stringify(input));
        process.stdin.end();
    });
    return JSON.parse(output);
}
exports.compileWithBinary = compileWithBinary;
//# sourceMappingURL=binary.js.map