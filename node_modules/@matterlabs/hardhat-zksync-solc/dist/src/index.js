"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const config_env_1 = require("hardhat/internal/core/config/config-env");
require("./type-extensions");
const artifacts_1 = require("hardhat/internal/artifacts");
const compile_1 = require("./compile");
const utils_1 = require("./utils");
const ZK_ARTIFACT_FORMAT_VERSION = 'hh-zksolc-artifact-1';
(0, config_env_1.extendEnvironment)((hre) => {
    if (hre.network.config.zksync) {
        hre.network.zksync = hre.network.config.zksync;
        let artifactsPath = hre.config.paths.artifacts;
        if (!artifactsPath.endsWith('-zk')) {
            artifactsPath = artifactsPath + '-zk';
        }
        let cachePath = hre.config.paths.cache;
        if (!cachePath.endsWith('-zk')) {
            cachePath = cachePath + '-zk';
        }
        // Forcibly update the artifacts object.
        hre.config.paths.artifacts = artifactsPath;
        hre.config.paths.cache = cachePath;
        hre.artifacts = new artifacts_1.Artifacts(artifactsPath);
    }
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_ARTIFACT_FROM_COMPILATION_OUTPUT, async ({ sourceName, contractName, contractOutput, }, hre) => {
    var _a, _b, _c, _d;
    if (hre.network.zksync !== true) {
        return (0, artifacts_1.getArtifactFromContractOutput)(sourceName, contractName, contractOutput);
    }
    let bytecode = ((_b = (_a = contractOutput.evm) === null || _a === void 0 ? void 0 : _a.bytecode) === null || _b === void 0 ? void 0 : _b.object) || ((_d = (_c = contractOutput.evm) === null || _c === void 0 ? void 0 : _c.deployedBytecode) === null || _d === void 0 ? void 0 : _d.object) || '';
    bytecode = (0, utils_1.zeroxlify)(bytecode);
    let factoryDeps = {};
    let entries = Object.entries(contractOutput.factoryDependencies || {});
    for (const [hash, dependency] of entries) {
        factoryDeps[(0, utils_1.zeroxlify)(hash)] = dependency;
    }
    return {
        _format: ZK_ARTIFACT_FORMAT_VERSION,
        contractName,
        sourceName,
        abi: contractOutput.abi,
        // technically, zkEVM has no difference between bytecode & deployedBytecode,
        // but both fields are included just in case
        bytecode,
        deployedBytecode: bytecode,
        // zksolc does not support unlinked objects,
        // all external libraries are either linked during compilation or inlined
        linkReferences: {},
        deployedLinkReferences: {},
        // zkSync-specific field
        factoryDeps,
    };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_RUN_SOLC, async (args, hre, runSuper) => {
    var _a, _b;
    if (hre.network.zksync !== true) {
        return runSuper(args);
    }
    const defaultConfig = {
        version: 'latest',
        compilerSource: 'binary',
        settings: {
            optimizer: {
                enabled: true,
            },
            experimental: {},
        },
    };
    const zksolc = Object.assign(Object.assign({}, defaultConfig), hre.config.zksolc);
    if ((_b = (_a = hre.config) === null || _a === void 0 ? void 0 : _a.zksolc) === null || _b === void 0 ? void 0 : _b.settings.libraries) {
        args.input.settings.libraries = hre.config.zksolc.settings.libraries;
    }
    // TODO: If solidity optimizer is not enabled, the libraries are not inlined and
    // we have to manually pass them into zksolc. So for now we force the optimization.
    args.input.settings.optimizer.enabled = true;
    return await (0, compile_1.compile)(zksolc, args.input);
});
// This task searches for the required solc version in the system and downloads it if not found.
// zksolc currently uses solc found in $PATH so this task is not needed for the most part.
// It is overriden to prevent unnecessary downloads.
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOLC_BUILD, async (args, hre, runSuper) => {
    if (hre.network.zksync !== true) {
        return runSuper(args);
    }
    // return dummy value, it's not used anywhere anyway
    return {
        compilerPath: '',
        isSolsJs: false,
        version: args.solcVersion,
        longVersion: args.solcVersion,
    };
});
//# sourceMappingURL=index.js.map